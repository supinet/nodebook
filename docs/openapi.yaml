openapi: 3.0.4
info:
  title: Swagger NodeBook - OpenAPI 3.0
  description: |-
    This is a sample Book Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.27
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://localhost:3001/api/v3
tags:
  - name: book
    description: Everything about your Books
    externalDocs:
      description: Find out more
      url: https://swagger.io
paths:
  /book:
    put:
      tags:
        - book
      summary: Update an existing book.
      description: Update an existing book by Id.
      operationId: updateBook
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
          application/xml:
            schema:
              $ref: "#/components/schemas/Book"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
            application/xml:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
        "422":
          description: Validation exception
        default:
          description: Unexpected error
    post:
      tags:
        - book
      summary: Add a new book to the store.
      description: Add a new book to the store.
      operationId: addBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
          application/xml:
            schema:
              $ref: "#/components/schemas/Book"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
            application/xml:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID.
      description: Returns a single book.
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
            application/xml:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
        default:
          description: Unexpected error
    post:
      tags:
        - book
      summary: Updates a book in the store with form data.
      description: Updates a book resource based on the form data.
      operationId: updateBookWithForm
      parameters:
        - name: bookId
          in: path
          description: ID of book needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of book that needs to be updated
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
            application/xml:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
        default:
          description: Unexpected error
    delete:
      tags:
        - book
      summary: Deletes a book.
      description: Delete Bookook.
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Pet deleted
        "400":
          description: Invalid pet value
        default:
          description: Unexpected error
components:
  schemas:
    Book:
      x-swagger-router-model: io.swagger.petstore.model.Book
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Book"
        application/xml:
          schema:
            $ref: "#/components/schemas/Book"
